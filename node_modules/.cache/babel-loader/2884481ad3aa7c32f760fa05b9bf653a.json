{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _constant = require(\"./../utils/constant\");\n\nvar _propValidator = require(\"../utils/propValidator\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ProgressBar(_ref) {\n  var _animationEvent;\n\n  var delay = _ref.delay,\n      isRunning = _ref.isRunning,\n      closeToast = _ref.closeToast,\n      type = _ref.type,\n      hide = _ref.hide,\n      className = _ref.className,\n      userStyle = _ref.style,\n      controlledProgress = _ref.controlledProgress,\n      progress = _ref.progress,\n      isProgressDone = _ref.isProgressDone,\n      rtl = _ref.rtl;\n\n  var style = _extends({}, userStyle, {\n    animationDuration: delay + \"ms\",\n    animationPlayState: isRunning ? 'running' : 'paused',\n    opacity: hide ? 0 : 1,\n    transform: controlledProgress ? \"scaleX(\" + progress + \")\" : null\n  });\n\n  var classNames = (0, _classnames.default)('Toastify__progress-bar', controlledProgress ? 'Toastify__progress-bar--controlled' : 'Toastify__progress-bar--animated', \"Toastify__progress-bar--\" + type, {\n    'Toastify__progress-bar--rtl': rtl\n  }, className);\n  var animationEvent = (_animationEvent = {}, _animationEvent[controlledProgress && isProgressDone ? 'onTransitionEnd' : 'onAnimationEnd'] = controlledProgress && !isProgressDone ? null : closeToast, _animationEvent);\n  return _react.default.createElement(\"div\", _extends({\n    className: classNames,\n    style: style\n  }, animationEvent));\n}\n\nProgressBar.propTypes = {\n  /**\r\n   * The animation delay which determine when to close the toast\r\n   */\n  delay: _propValidator.falseOrDelay.isRequired,\n\n  /**\r\n   * Whether or not the animation is running or paused\r\n   */\n  isRunning: _propTypes.default.bool.isRequired,\n\n  /**\r\n   * Func to close the current toast\r\n   */\n  closeToast: _propTypes.default.func.isRequired,\n\n  /**\r\n   * Support rtl content\r\n   */\n  rtl: _propTypes.default.bool.isRequired,\n\n  /**\r\n   * Optional type : info, success ...\r\n   */\n  type: _propTypes.default.string,\n\n  /**\r\n   * Hide or not the progress bar\r\n   */\n  hide: _propTypes.default.bool,\n\n  /**\r\n   * Optionnal className\r\n   */\n  className: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object]),\n\n  /**\r\n   * Controlled progress value\r\n   */\n  progress: _propTypes.default.number,\n\n  /**\r\n   * Tell wether or not controlled progress bar is used\r\n   */\n  controlledProgress: _propTypes.default.bool,\n\n  /**\r\n   * Helper to close the toast when using controlled progress value\r\n   */\n  isProgressDone: _propTypes.default.bool\n};\nProgressBar.defaultProps = {\n  type: _constant.TYPE.DEFAULT,\n  hide: false\n};\nvar _default = ProgressBar;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}